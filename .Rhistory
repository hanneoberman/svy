summary(society$a_dvage[society$a_employ=="inapplicable"])
# Inapplicable seems to contain all children and youths of 21 years and younger
# It cannot be assumed that none of them is employed. It can however be assumed that only a
# small part of them is employed, as children under 15 cannot be employed legally
# and most would still be going to a school or university.
nrow(society[society$a_employ=="refuse",])
nrow(society[society$a_employ=="don\'t know",])
# Both refuse and don't know contain one row. These can be treated as missing data.
# Thus, our goal is to compare the proportion of employed people (yes) of working age against
# the number of unemployed people (no, inapplicable), excluding the missing data (refuse, don't know)
with(society, nrow(society[a_employ=="yes" & a_dvage >64,]))
# There are people older than 64 still working, we should exclude those.
with(society, nrow(society[a_employ=="yes" & a_dvage <15,]))
# No one younger than 15 years is reported to be working, which is to be expected as it was not
# a question asked to people under 21 years of age.
# Since we wish to know the proportion of employed people of working age, we need 2 groups, one with employed adults and one with unemployed people and employed elderly.
society$employ_dv <- as.numeric(0)
society$employ_dv[society$a_employ=='yes' & society$a_dvage <= 65] <- 1
# Create design
# Don't remove the missing values yet, as the weights are calculated including missing values
Design <- svydesign(ids=~a_hidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
# Make a subset of non-missing values
Nonmiss <- with(Design, subset(Design, a_employ!="refuse" & a_employ!="don\'t know"))
svymean(~employ_dv, Nonmiss)
confint(svymean(~employ_dv, Nonmiss))
# 43,3% of the population is employed, with a 95% confidence interval of 41.4%-45.2%
# Inspect levels of variables
levels(society$a_livesp_dv)
levels(society$a_cohab_dv)
levels(society$a_single_dv)
levels(society$a_mastat_dv)
###### HOUSEHOLD SIZE PER HOUSEHOLD
# a_hidp - Household identifier
# Household size: count for each household, how many persons there are in.
# Get household size per household
count <- as.matrix(table(society$a_hidp))
summary(count)
# Turn into dataframe and join to society
households <- data.frame(a_hidp=as.numeric(rownames(count)), hh_size=count)
##### NUMBER OF CHILDREN PER HOUSEHOLD
# Count the number of kids under the age of 16 using the mastat variable
for(i in households$a_hidp){
hh <- society[society$a_hidp==i,]
households$n_child[households$a_hidp==i]=as.numeric(table(hh$a_mastat_dv)["Child under 16"])
}
##### ANY CHILDREN IN HOUSEHOLD
# Create variable whether the household has children in it (True for households with children)
households$with_child <- households$n_child > 0
##### ANY SINGLE ADULTS IN HOUSEHOLD
# Create variable whether the person is a single adult (true) or not (false)
society$single_adult <- society$a_single_dv == "Yes" & society$a_dvage >= 16
# Create variable whether there is a single adult in the household
for(i in households$a_hidp){
households$hasSingle[households$a_hidp==i] <- any(society$single_adult[society$a_hidp==i])
}
##### ANY COUPLES IN HOUSEHOLD
# Create variable whether the person is in a couple (true) or not (false)
society$inacouple <- society$a_livesp_dv == "Yes" | society$a_cohab_dv == "Yes"
# Create variable whether there is a couple in the household
for(i in households$a_hidp){
households$hasCouple[households$a_hidp==i] <- any(society$inacouple[society$a_hidp==i])
}
##### HOUSEHOLD TYPE
# Create matrix containing household states
household_states <- matrix(c("Couple with children", "Couple without children",
"Single with children", "Single without children"), nrow=2)
# Create household info variable
households$hh_type <- ""
for (i in seq(1,nrow(households))){
# Get right row of household state
if (households$with_child[i]){
child = 1
}
else child = 2
# Get right column of household state
if(households$hasCouple[i]){
state = 1
}
else if(households$hasSingle[i]){
state = 2
}
# Select household state and put in households$hh_type
households$hh_type[i] <- household_states[child, state]
}
=======
summary(emptymodel)
# backwards selection
backwards <- step(fullmodel)
halffullmodel <- glm(NR ~
a_gor_dv + a_urban_dv + a_sex + a_racel_dv +
a_employ + a_dvage + a_agegr5_dv + a_agegr10_dv + a_agegr13_dv +
household_size
,family = binomial, data = society)
halfbackwards <- step(halffullmodel)
halfbackwards <- step(halffullmodel)
summary(halfbackwards)
View(society)
halffullmodel <- glm(NR ~
a_gor_dv + a_urban_dv + a_sex + a_racel_dv +
a_employ + a_dvage + a_agegr5_dv + a_agegr10_dv + a_agegr13_dv +
household_size + singleadults + inacouple + single
,family = binomial, data = society)
summary(halfbackwards)
halfbackwards <- step(halffullmodel)
halfforwards <- step(emptymodel,scope=list(lower=formula(emptymodel),
upper=formula(halffullmodel)), direction="forward")
formula(halffullmodel)
formula(halfbackwards)
# Load packages
require(survey)
require(sampling)
require(dplyr)
require(MASS)
# Load society dataset
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
# Remove unnecessary columns
# society <- society[,-c(2,3,6,7,15:52, 61, 63, 64, 66:75, 78:80, 82:86, 90, 91, 93)]
# Change variable types
society$a_dvage <- as.numeric(society$a_dvage)
# Calculate variance of design weight
Var <- var(society$a_psnenip_xd)
# Combine variance with other descriptive statistics
Descr <- cbind(t(summary(society$a_psnenip_xd)), Var)
# Print with up to 2 decimals
round(Descr, 2)
# Create histogram of design weight values
hist(society$a_psnenip_xd,
breaks = 8,
main = NULL, #"Histogram of design weight variable 'a_psnenip_xd'",
xlab = "Value of the design weight")
# Investigate levels of government office region variable
levels(society$a_gor_dv)
nrow(society[society$a_gor_dv == "missing",])
nrow(society[society$a_gor_dv == "northern ireland",])
# None of the value are missing or northern ireland, so those can be ignored
# Run linear regression
coeff <- with(society, lm(a_psnenip_xw ~ a_psnenip_xd + a_sex + a_dvage + a_gor_dv))
# Get and sort coefficients
coeff <- coeff$coefficients
coeff.gor <- sort(coeff[5:15])
# Plot coefficients
plot(coeff.gor, xlab = "Government Region", ylab = "Coefficient")
# Show coefficients
coeff.gor
# Gather grouped region in one variable
society$gor_groups <- "England_Wales"
society$gor_groups[society$a_gor_dv=="london"] <- "London"
society$gor_groups[society$a_gor_dv == "scotland"] <- "Scotland"
society$gor_groups[society$a_gor_dv == "west midlands"] <- "West Midlands"
# Change government office region groups and age into factors
society$gor_groups <- as.factor(society$gor_groups)
society$age_fac <- as.factor(society$a_dvage)
# Rerun linear regression
coeff2 <- with(society, lm(a_psnenip_xw ~ a_psnenip_xd + a_sex + gor_groups + age_fac))
# Get coefficients
coeff2 <- coeff2$coefficients
coeff2.age <- coeff2[7:102]
# Change names of coefficients into numbers
x <- unlist(strsplit(names(coeff2.age), "age_fac"))
names(coeff2.age) <- x[x!=""]
# Plot coefficients
plot(as.numeric(names(coeff2.age)), coeff2.age)
for (i in seq(10,110,10)+0.5){
abline(v=i, col="red")
}
# Assign the levels
levels(society$age_fac) <- c(rep("group0_20", 15), rep("group21_30", 10),
rep("group31_40", 10), rep("group41_50",10),
rep("group51_70", 20), rep("group71_80", 10),
rep("group_80", 22))
# Create table
with(society, table(age_fac,gor_groups))
# None of the groups has zero observations
# Run linear regression again
coeff3 <- with(society, lm(a_psnenip_xw ~ a_psnenip_xd + a_sex + gor_groups + age_fac))
#Get coefficients
coeff3 <- coeff3$coefficients
coeff3
# Investigate the a_employ variable.
levels(society$a_employ[society$a_dvage > 15 & society$a_dvage < 64])
# The variable a_employ has seven levels.
summary(society$a_dvage[society$a_employ=="yes"])
summary(society$a_dvage[society$a_employ=="no"])
# Yes and no contain people of over 21 years of age.
nrow(society[society$a_employ=="missing",])
nrow(society[society$a_employ=="proxy respondent",])
# Missing and proxy respondent do not appear in the data
summary(society$a_dvage[society$a_employ=="inapplicable"])
# Inapplicable seems to contain all children and youths of 21 years and younger
# It cannot be assumed that none of them is employed. It can however be assumed that only a
# small part of them is employed, as children under 15 cannot be employed legally
# and most would still be going to a school or university.
nrow(society[society$a_employ=="refuse",])
nrow(society[society$a_employ=="don\'t know",])
# Both refuse and don't know contain one row. These can be treated as missing data.
# Thus, our goal is to compare the proportion of employed people (yes) of working age against
# the number of unemployed people (no, inapplicable), excluding the missing data (refuse, don't know)
with(society, nrow(society[a_employ=="yes" & a_dvage >64,]))
# There are people older than 64 still working, we should exclude those.
with(society, nrow(society[a_employ=="yes" & a_dvage <15,]))
# No one younger than 15 years is reported to be working, which is to be expected as it was not
# a question asked to people under 21 years of age.
# Since we wish to know the proportion of employed people of working age, we need 2 groups, one with employed adults and one with unemployed people and employed elderly.
society$employ_dv <- as.numeric(0)
society$employ_dv[society$a_employ=='yes' & society$a_dvage <= 65] <- 1
# Create design
# Don't remove the missing values yet, as the weights are calculated including missing values
Design <- svydesign(ids=~a_hidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
# Make a subset of non-missing values
Nonmiss <- with(Design, subset(Design, a_employ!="refuse" & a_employ!="don\'t know"))
svymean(~employ_dv, Nonmiss)
confint(svymean(~employ_dv, Nonmiss))
# 43,3% of the population is employed, with a 95% confidence interval of 41.4%-45.2%
# Inspect levels of variables
levels(society$a_livesp_dv)
levels(society$a_cohab_dv)
levels(society$a_single_dv)
levels(society$a_mastat_dv)
###### HOUSEHOLD SIZE PER HOUSEHOLD
# a_hidp - Household identifier
# Household size: count for each household, how many persons there are in.
# Get household size per household
count <- as.matrix(table(society$a_hidp))
summary(count)
# Turn into dataframe and join to society
households <- data.frame(a_hidp=as.numeric(rownames(count)), hh_size=count)
##### NUMBER OF CHILDREN PER HOUSEHOLD
# Count the number of kids under the age of 16 using the mastat variable
for(i in households$a_hidp){
hh <- society[society$a_hidp==i,]
households$n_child[households$a_hidp==i]=as.numeric(table(hh$a_mastat_dv)["Child under 16"])
}
##### ANY CHILDREN IN HOUSEHOLD
# Create variable whether the household has children in it (True for households with children)
households$with_child <- households$n_child > 0
##### ANY SINGLE ADULTS IN HOUSEHOLD
# Create variable whether the person is a single adult (true) or not (false)
society$single_adult <- society$a_single_dv == "Yes" & society$a_dvage >= 16
# Create variable whether there is a single adult in the household
for(i in households$a_hidp){
households$hasSingle[households$a_hidp==i] <- any(society$single_adult[society$a_hidp==i])
}
##### ANY COUPLES IN HOUSEHOLD
# Create variable whether the person is in a couple (true) or not (false)
society$inacouple <- society$a_livesp_dv == "Yes" | society$a_cohab_dv == "Yes"
# Create variable whether there is a couple in the household
for(i in households$a_hidp){
households$hasCouple[households$a_hidp==i] <- any(society$inacouple[society$a_hidp==i])
}
##### HOUSEHOLD TYPE
# Create matrix containing household states
household_states <- matrix(c("Couple with children", "Couple without children",
"Single with children", "Single without children"), nrow=2)
# Create household info variable
households$hh_type <- ""
for (i in seq(1,nrow(households))){
# Get right row of household state
if (households$with_child[i]){
child = 1
}
else child = 2
# Get right column of household state
if(households$hasCouple[i]){
state = 1
}
else if(households$hasSingle[i]){
state = 2
}
# Select household state and put in households$hh_type
households$hh_type[i] <- household_states[child, state]
}
>>>>>>> Stashed changes
# Show how many of each category there are
table(households$hh_type)
# Join to society dataset
society <- left_join(society, households, by="a_hidp")
# update sampling design
Design <- svydesign(ids=~a_hidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
<<<<<<< Updated upstream
tab <- svytable(~a_agegr5_dv + hh_type, Design) # creates a contingency table of
tab
# The Ntotal argument can be either a single number or a data frame whose first column gives the (first-stage) sampling strata and second column the population size in each stratum. In this second case the svytable command performs ???post-stratification???: tabulating and scaling to the population within strata and then adding up the strata.
summary(tab)
# The Ntotal argument can be either a single number or a data frame whose first column gives the (first-stage) sampling strata and second column the population size in each stratum. In this second case the svytable command performs ???post-stratification???: tabulating and scaling to the population within strata and then adding up the strata.
ftable(tab)
summary(ftable(tab))
tab <- svytable(~a_agegr5_dv + hh_type, Design, statistic = "Chisq") # creates a contingency table of
# The Ntotal argument can be either a single number or a data frame whose first column gives the (first-stage) sampling strata and second column the population size in each stratum. In this second case the svytable command performs ???post-stratification???: tabulating and scaling to the population within strata and then adding up the strata.
ftable(tab)
summary(ftable(tab))
tab
tab <- ftable(svytable(~a_agegr5_dv + hh_type, Design)) # creates a contingency table of
summary(ftable(tab))
# plot the relationshp between age categories and household types.
plot(tab, xlab = "age categories", ylab = "household types", col=c("steelblue1","sienna1","plum2","goldenrod1"))
tab <- svytable(~a_agegr5_dv + hh_type, Design) # creates a contingency table of
# plot the relationshp between age categories and household types.
plot(tab, xlab = "age categories", ylab = "household types", col=c("steelblue1","sienna1","plum2","goldenrod1"))
summary(ftable(tab))
# The Ntotal argument can be either a single number or a data frame whose first column gives the (first-stage) sampling strata and second column the population size in each stratum. In this second case the svytable command performs ???post-stratification???: tabulating and scaling to the population within strata and then adding up the strata.
ftable(tab)
# The Ntotal argument can be either a single number or a data frame whose first column gives the (first-stage) sampling strata and second column the population size in each stratum. In this second case the svytable command performs ???post-stratification???: tabulating and scaling to the population within strata and then adding up the strata.
ftable(tab)
?ftable
chisq.test(tab)
?svychisq
# try to do Chisq test but this doesn't work yet.
svychisq(~a_agegr5_dv + hh_type, Design)
=======
tab <- svytable(~a_agegr5_dv + hh_type.x, Design) # creates a contingency table of
>>>>>>> Stashed changes
# Create another new age variable
society$a_agegr5a_dv <- factor(society$a_agegr5_dv)
# Load packages
require(survey)
require(sampling)
require(dplyr)
require(MASS)
# Load society dataset
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
# Remove unnecessary columns
# society <- society[,-c(2,3,6,7,15:52, 61, 63, 64, 66:75, 78:80, 82:86, 90, 91, 93)]
# Change variable types
# a_dvage is the average age over all waves. Inspecting the data shows that -6 gives the age during the first wave.
society$a_dvage <- as.numeric(society$a_dvage) - 6
# Create another new age variable
society$a_agegr5a_dv <- factor(society$a_agegr5_dv)
levels(society$a_agegr5a_dv)
levels(society$a_agegr5a_dv) <- c(rep("0-14", 3), "15-19 years old", "20-24 years old", "25-29 years old", "30-34 years old", "35-39 years old",
"40-44 years old", "45-49 years old", "50-54 years old", "55-59 years old",  rep("60+",3))
levels(society$a_agegr5a_dv) <- c(rep("0-14", 3), "15-19 years old", "20-24 years old", "25-29 years old", "30-34 years old", "35-39 years old",
"40-44 years old", "45-49 years old", "50-54 years old", "55-59 years old",  rep("60+",3))
# update sampling design
Design <- svydesign(ids=~pidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
# With 5 year interval variable
tab5 <- svytable(~a_agegr5a_dv + hh_type, Design) # creates a contingency table of
# Create another new age variable
society$a_agegr5a_dv <- factor(society$a_agegr5_dv)
levels(society$a_agegr5a_dv) <- c(rep("0-14", 3), "15-19 years old", "20-24 years old", "25-29 years old", "30-34 years old", "35-39 years old",
"40-44 years old", "45-49 years old", "50-54 years old", "55-59 years old",  rep("60+",3))
# update sampling design
Design <- svydesign(ids=~pidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
# With 5 year interval variable
tab5 <- svytable(~a_agegr5a_dv + hh_type, Design) # creates a contingency table of
# Inspect levels of variables
levels(society$a_livesp_dv)
levels(society$a_cohab_dv)
levels(society$a_single_dv)
levels(society$a_mastat_dv)
###### HOUSEHOLD SIZE PER HOUSEHOLD
# a_hidp - Household identifier
# Household size: count for each household, how many persons there are in.
# Get household size per household
count <- as.matrix(table(society$a_hidp))
summary(count)
# Turn into dataframe and join to society
households <- data.frame(a_hidp=as.numeric(rownames(count)), hh_size=count)
##### NUMBER OF CHILDREN PER HOUSEHOLD
# Count the number of kids under the age of 16 using the mastat variable
for(i in households$a_hidp){
hh <- society[society$a_hidp==i,]
households$n_child[households$a_hidp==i]=as.numeric(table(hh$a_mastat_dv)["Child under 16"])
}
##### ANY CHILDREN IN HOUSEHOLD
# Create variable whether the household has children in it (True for households with children)
households$with_child <- households$n_child > 0
##### ANY SINGLE ADULTS IN HOUSEHOLD
# Create variable whether the person is a single adult (true) or not (false)
society$single_adult <- society$a_single_dv == "Yes" & society$a_dvage >= 16
# Create variable whether there is a single adult in the household
for(i in households$a_hidp){
households$hasSingle[households$a_hidp==i] <- any(society$single_adult[society$a_hidp==i])
}
##### ANY COUPLES IN HOUSEHOLD
# Create variable whether the person is in a couple (true) or not (false)
society$inacouple <- society$a_livesp_dv == "Yes" | society$a_cohab_dv == "Yes"
# Create variable whether there is a couple in the household
for(i in households$a_hidp){
households$hasCouple[households$a_hidp==i] <- any(society$inacouple[society$a_hidp==i])
}
##### HOUSEHOLD TYPE
# Create matrix containing household states
household_states <- matrix(c("Couple with children", "Couple without children",
"Single with children", "Single without children"), nrow=2)
# Create household info variable
households$hh_type <- ""
for (i in seq(1,nrow(households))){
# Get right row of household state
if (households$with_child[i]){
child = 1
}
else child = 2
# Get right column of household state
if(households$hasCouple[i]){
state = 1
}
else if(households$hasSingle[i]){
state = 2
}
# Select household state and put in households$hh_type
households$hh_type[i] <- household_states[child, state]
}
# Show how many of each category there are
table(households$hh_type)
# Join to society dataset
society <- left_join(society, households, by="a_hidp")
# Create another new age variable
society$a_agegr5a_dv <- factor(society$a_agegr5_dv)
levels(society$a_agegr5a_dv) <- c(rep("0-14", 3), "15-19 years old", "20-24 years old", "25-29 years old", "30-34 years old", "35-39 years old",
"40-44 years old", "45-49 years old", "50-54 years old", "55-59 years old",  rep("60+",3))
# update sampling design
Design <- svydesign(ids=~pidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
# With 5 year interval variable
tab5 <- svytable(~a_agegr5a_dv + hh_type, Design) # creates a contingency table of
plot(tab5, xlab = "Age group (years old)", ylab = "Household type", main = "Household types per age category",
col=c("steelblue1","sienna1","plum2","goldenrod1"), las = 1, mar = c(3,4,4,2)
)
levels(society$a_agegr5a_dv) <- c(rep("0-14", 3), "15-19", "20-24", "25-29", "30-34", "35-39",
"40-44", "45-49", "50-54", "55-59",  rep("60+",3))
# update sampling design
Design <- svydesign(ids=~pidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
# With 5 year interval variable
tab5 <- svytable(~a_agegr5a_dv + hh_type, Design) # creates a contingency table of
plot(tab5, xlab = "Age group (years old)", ylab = "Household type", main = "Household types per age category",
col=c("steelblue1","sienna1","plum2","goldenrod1"), las = 1, mar = c(3,4,4,2)
)
require(sampling)
# Load packages
require(survey)
require(sampling)
require(dplyr)
require(MASS)
# Load society dataset
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
# Remove unnecessary columns
# society <- society[,-c(2,3,6,7,15:52, 61, 63, 64, 66:75, 78:80, 82:86, 90, 91, 93)]
# Change variable types
# a_dvage is the average age over all waves. Inspecting the data shows that -6 gives the age during the first wave.
society$a_dvage <- as.numeric(society$a_dvage) - 6
# Inspect levels of variables
levels(society$a_livesp_dv)
levels(society$a_cohab_dv)
levels(society$a_single_dv)
levels(society$a_mastat_dv)
###### HOUSEHOLD SIZE PER HOUSEHOLD
# a_hidp - Household identifier
# Household size: count for each household, how many persons there are in.
# Get household size per household
count <- as.matrix(table(society$a_hidp))
summary(count)
# Turn into dataframe and join to society
households <- data.frame(a_hidp=as.numeric(rownames(count)), hh_size=count)
##### NUMBER OF CHILDREN PER HOUSEHOLD
# Count the number of kids under the age of 16 using the mastat variable
for(i in households$a_hidp){
hh <- society[society$a_hidp==i,]
households$n_child[households$a_hidp==i]=as.numeric(table(hh$a_mastat_dv)["Child under 16"])
}
##### ANY CHILDREN IN HOUSEHOLD
# Create variable whether the household has children in it (True for households with children)
households$with_child <- households$n_child > 0
##### ANY SINGLE ADULTS IN HOUSEHOLD
# Create variable whether the person is a single adult (true) or not (false)
society$single_adult <- society$a_single_dv == "Yes" & society$a_dvage >= 16
# Create variable whether there is a single adult in the household
for(i in households$a_hidp){
households$hasSingle[households$a_hidp==i] <- any(society$single_adult[society$a_hidp==i])
}
##### ANY COUPLES IN HOUSEHOLD
# Create variable whether the person is in a couple (true) or not (false)
society$inacouple <- society$a_livesp_dv == "Yes" | society$a_cohab_dv == "Yes"
# Create variable whether there is a couple in the household
for(i in households$a_hidp){
households$hasCouple[households$a_hidp==i] <- any(society$inacouple[society$a_hidp==i])
}
##### HOUSEHOLD TYPE
# Create matrix containing household states
household_states <- matrix(c("Couple with children", "Couple without children",
"Single with children", "Single without children"), nrow=2)
# Create household info variable
households$hh_type <- ""
for (i in seq(1,nrow(households))){
# Get right row of household state
if (households$with_child[i]){
child = 1
}
else child = 2
# Get right column of household state
if(households$hasCouple[i]){
state = 1
}
else if(households$hasSingle[i]){
state = 2
}
# Select household state and put in households$hh_type
households$hh_type[i] <- household_states[child, state]
}
# Show how many of each category there are
table(households$hh_type)
# Join to society dataset
society <- left_join(society, households, by="a_hidp")
# Create another new age variable
society$a_agegr5a_dv <- factor(society$a_agegr5_dv)
levels(society$a_agegr5a_dv) <- c(rep("0-14", 3), "15-19", "20-24", "25-29", "30-34", "35-39",
"40-44", "45-49", "50-54", "55-59",  rep("60+",3))
# update sampling design
Design <- svydesign(ids=~pidp, strata=~a_strata, data=society, weights=~a_psnenip_xw)
# With 5 year interval variable
tab5 <- svytable(~a_agegr5a_dv + hh_type, Design) # creates a contingency table of
plot(tab5, xlab = "Age group (years old)", ylab = "Household type", main = "Household types per age category",
col=c("steelblue1","sienna1","plum2","goldenrod1"), las = 1, mar = c(3,4,4,2)
)
