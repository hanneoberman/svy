TP0.4 = 1000*x*0.4
FDR0.8 = FP/(FP+TP2)
FDR0.4 = FP/(FP+TP1)
plot(x,FDR0.8, main="Relation between FDR and percentage of studies with effect",xlab="Percentage of studies with effect", ylab="FDR", ylim=c(0,1))
points(x,FDR0.4, col="red")
legend("topleft", legend=c("Power=0.8", "Power=0.4"), fill=c("black", "red"))
plot(x,FDR0.8, main="Relation between FDR and percentage of studies with effect",xlab="Percentage of studies with effect", ylab="FDR", ylim=c(0,1))
points(x,FDR0.4, col="red")
legend("topright", legend=c("Power=0.8", "Power=0.4"), fill=c("black", "red"))
x = seq(0,0.5,0.001)
FP = 1000*(1-x)*0.05
TP0.8 = 1000*x*0.8
TP0.4 = 1000*x*0.4
FDR0.8 = FP/(FP+TP0.8)
FDR0.4 = FP/(FP+TP0.4)
plot(x,FDR0.8, main="Relation between FDR and percentage of studies with effect",xlab="Percentage of studies with effect", ylab="FDR", ylim=c(0,1))
points(x,FDR0.4, col="red")
legend("topright", legend=c("Power=0.8", "Power=0.4"), fill=c("black", "red"))
x = seq(0,0.5,0.001)
FP = 1000*(1-x)*0.05
TP0.8 = 1000*x*0.8
TP0.4 = 1000*x*0.4
TP0.2 = 1000*x*0.2
FDR0.8 = FP/(FP+TP0.8)
FDR0.4 = FP/(FP+TP0.4)
FDR0.2 = FP/(FP+TP0.2)
plot(x,FDR0.8, main="Relation between FDR and percentage of studies with effect",xlab="Percentage of studies with effect", ylab="FDR", ylim=c(0,1))
points(x,FDR0.4, col="blue")
points(x,FDR0.2, col="red")
legend("topright", legend=c("Power=0.8", "Power=0.4", "Power=0.2"), fill=c("black", "blue", "red"))
line(0.5)
install.packages("Hmisc")
install.packages("Hmisc")
install.packag
library(Hmisc)
library(Hmisc)
library(HSAUR2)
data(USmelanoma)
library(Hmisc)
library(HSAUR2)
data(USmelanoma)
describe(USmelanoma)
sumary(USmelanoma)
summary(USmelanoma)
describe(USmelanoma)
summary(USmelanoma)
describe(USmelanoma)
describe(USmelanoma, exlude.missing=T)
describe(USmelanoma)
describe(USmelanoma, na.action=na.omit)
describe(USmelanoma)
describe(USmelanoma, scroll)
describe(USmelanoma, scroll=T)
describe(USmelanoma, scroll=T, condense=T)
describe(USmelanoma, scroll=T, condense=F)
describe(USmelanoma, scroll=T, condense=T)
sapply(USmelanoma,FUN=mean)
library(HSAUR2)
data(USmelanoma)
?USmelanoma
summary(USmelanoma)
sapply(USmelanoma,FUN=mean)
library(Hmisc)
library(HSAUR2)
data(USmelanoma)
bystat(USMelanoma, fun=mean, nmiss=F)
bystats(USMelanoma, fun=mean, nmiss=F)
bystats(USMelanoma, fun=mean)
View(USmelanoma)
bystats(USMelanoma[,1:3], fun=mean)
bystats(USMelanoma[,1:3], fun=mean(x))
bystats(USMelanoma[,1:3]
bystats(USMelanoma[,1:3]_
bystats(USMelanoma[,1:3])
bystats(USmelanoma)
bystats(USmelanoma[,-4], fun=colMeans(x))
bystats(USmelanoma[,-4])
bystats(USmelanoma[,-4],ocean)
bystats(USmelanoma[,-4],USmelanoma$ocean)
sapply(USmelanoma[,-4],FUN=function(x) c(mean(x),sd(x)))
bystats(USmelanoma[,-4],USmelanoma$ocean, fun=function(x)c(mean(x), sd(x)))
bystats(USmelanoma[,-4],USmelanoma$ocean)
bystats(USmelanoma[,-4],USmelanoma$ocean, fun=function(x)c(Mean=mean(x), SD=sd(x)))
bystats(USmelanoma[,-4],USmelanoma$ocean, fun=function(x)c(Mean=colMeans(x), SD=colSds(x)))
bystats(USmelanoma[,-4],USmelanoma$ocean)
install.packages(timeSeries)
install.packages("timeSeries")
library(timeSeries)
bystats(USmelanoma[,-4],USmelanoma$ocean)
bystats(USmelanoma[,-4],USmelanoma$ocean, fun=function(x)c(Mean=colMeans(x), SD=colSds(x)))
bystats(USmelanoma[,-4],USmelanoma$ocean)
bystats(USmelanoma[,-4],USmelanoma$ocean, fun=function(x)c(Mean=colMeans(x), SD=colSds(x)))
bystats(USmelanoma[,-4], fun=function(x)c(Mean=colMeans(x), SD=colSds(x)))
require(psych)
describe(USmelanoma[,-4])
detach("package:psych", unload=TRUE)
library(Hmisc)
x = describe(USmelanoma, scroll=T)
plot(USmelanoma, scroll=T)
plot(USmelanoma, which=c('categorical))
plot(USmelanoma, which=c('categorical'))
plot(USmelanoma, which=c('categorical'))
x = describe(USmelanoma)
plot(x, which=c('categorical'))
plot(x, which='both')
with(USmelanoma,hist(mortality))
par(mfrow=c(1,2))
with(USmelanoma,plot(mortality,latitude))
with(USmelanoma,plot(mortality,longitude))
with(USmelanoma,scatter.hist(latitude,mortality))
library(psych)
with(USmelanoma, scatter.hist(latitude, mortality)
plot(x, which='both')
with(USmelanoma, scatter.hist(latitude, mortality))
par(mfrow=2)
par(mfrow=c(1,2)
with(USmelanoma, scatter.hist(latitude, mortality))
par(mfrow=c(1,2))
with(USmelanoma, scatter.hist(latitude, mortality))
with(USmelanoma, scatter.hist(longitude, mortality))
with(USmelanoma, scatter.hist(latitude, mortality))
with(USmelanoma, scatter.hist(longitude, mortality))
cor(USmelanoma[,1:3])
cor(USmelanoma[,1:3],method = "spearman")
with(USmelanoma,cor.test(mortality,latitude))
plot(x, which='both')
corr.test(USmelanoma[,1:3]) # cor matrix with sample size and p values
with(USmelanoma,corr.test(USmelanoma[1:3]))
par(mfrow=c(1,1))
with(USmelanoma,boxplot(mortality~ocean))
with(USmelanoma,boxplot(mortality[ocean=="no"],mortality[ocean=="yes"]))
with(USmelanoma,boxplot(mortality~ocean))
with(USmelanoma,t.test(mortality~ocean))
with(USmelanoma,bartlett.test(mortality~ocean))
with(USmelanoma,qqnorm(mortality))
with(USmelanoma,qqline(mortality))
library(lawstat)
with(USmelanoma,levene.test(mortality, ocean))
with(USmelanoma,tapply(mortality,INDEX=ocean,FUN=summary))
with(USmelanoma,tapply(mortality,INDEX=ocean,FUN=function(x) c(mean(x),sd(x))))
by(USmelanoma[,1:3],INDICES=USmelanoma$ocean,FUN=summary)
with(USmelanoma(describeBy(USmelanoma[,1:3], ocean)
with(USmelanoma(describeBy(USmelanoma[,1:3], ocean))
with(USmelanoma, describeBy(USmelanoma[,1:3], ocean)
install.packages("gmodels")
install.packages("gmodels")
with(USmelanoma, describeBy(USmelanoma[,1:3], ocean))
library(gstats)
library(gmodels)
CrossTable(mat(USmelanoma[1:3]))
CrossTable(as.matrix(USmelanoma[1:3]))
install.packages("summaryBy")
install.packages("describeBy")
data(infert)
library(doBy)
install.packages("doBy")
library(doBy)
summaryBy
summaryBy()
with(summaryBy(USmelanoma[,1:3], USmelanoma$ocean)
with(summaryBy(USmelanoma[,1:3], ocean)
with(summaryBy(USmelanoma[,1:3], ocean)
with(summaryBy(USmelanoma[,1:3], ocean))
with(summaryBy(USmelanoma[,1:3], ocean))
with(USmelanoma, summaryBy(USmelanoma[,1:3], ocean))
with(USmelanoma, summaryBy(USmelanoma[,1:3]~ocean))
with(USmelanoma, summaryBy(ocean~USmelanoma[,1:3]))
with(USmelanoma, summaryBy(ocean~USmelanoma[,1:3]))
with(USmelanoma, summaryBy(mortality~ocean))
summaryBy(mortality~ocean, USmelanoma)
summaryBy(mortality~ocean, USmelanoma, FUN=c(mean, var, median))
summaryBy(mortality~ocean, USmelanoma, FUN=c(mean, var, median))
# MyTtest function
# Performs a two-sample t-test (two-tailed)
# data 1 are data 2 must be vectors of numbers
# Returns descriptive statistics, t-statistic and p-value
MyTtest <- function(data1, data2) {
# Define length (n), mean(m) and variance (var) of each group
n1 <- length(data1)
n2 <- length(data2)
m1 <- mean(data1)
m2 <- mean(data2)
var1 <- sum((data1-m1)^2/(n1-1))
var2 <- sum((data2-m2)^2/(n2-1))
# Create data frame with n, m, and var per group for output
# First, use substitute to get the original variable names
name1 <- as.character(substitute(data1))
name2 <- as.character(substitute(data2))
# Then create the data frame
dataf <- data.frame("n"=c(n1,n2), "mean"=c(m1,m2),"variance"=c(var1,var2), row.names=c(name1, name2))
# Calculated pooled variance
pooledvar <- ((n1-1)*var1 + (n2-1)*var2)/(n1-1+n2-1)
# Calculate t-statistic
t <- (m1-m2)/(sqrt(pooledvar)*sqrt((1/n1)+(1/n2)))
# Calculate p-value
p <- 2*pt(-abs(t), df=n1+n2-2)
list("descriptive statistics"=dataf, "t-statistic"=t, "p-value"=p)
}
# Run my t-test again to test if it works
MyTtest(CSFI, TFI)
# Load data
setwd("C:/Users/rikul/OneDrive/Documents/University Stuff/M&S/R")
gala <- read.table("gala.txt", header=T)
# MyLRegression function
# MyLRegression performs a linear regression
# MyLRegression takes a matrix of predictors (one variable per column, one sample per row) and vector of the dependent variable as input
# If no dependent variable is given, the first column of the predictor matrix becomes the dependent variable
# MyLRegression prints the name of the dependent variable, the coefficients and some statistics of the residuals
# MyLRegression returns the coefficients ("Coefficients"), the predicted values("Predicted") and residuals ("Residuals")
MyLRegression <- function(data, dv=0){
# Turn data into matrix to prevent later trouble
data <- as.matrix(data)
# Check if dependent variable is given (if dv is nonzero, any(dv!=0) will be True)
if(any(dv!=0)){
# Store name of dv
dvname <- as.character(substitute(dv))
# Check if dv is data frame, if so: select first column
if(class(dv)=="data.frame"){
if(ncol(dv)>1){
stop("This function can handle only one dv")
}
dv=as.numeric(dv[,1])
}
# Check if dv has the same length as the data, if not, return an error
if(length(as.numeric(dv))!=nrow(data)){
stop("Length of dv does not match length of data")
}
}
else{
# Check if data has less than two columns (and thus no column left after dv is assigned).
# If so, give error.
if(ncol(data)<2){
stop("At least two variables are needed for linear regression.\n\n")
}
# Store name of dv for later use
dvname <- colnames(data)[1]
# Make the first column of data dv and remove it from data
dv=data[,1]
data=data[,-1]
# Give warning
warning("No dv was given. Using the first column as dv\n\n")
}
# Add intercept to data and transform into matrix
X <- as.matrix(cbind("(Intercept)"=rep(1,nrow(data)), data))
# Define the transpose
tX <- t(X)
# Define y
y <- as.numeric(dv)
# Calculate the inverse of X'X
tXXinv <- solve(tX%*%X)
# Calculate the coefficients (beta)
coef <- tXXinv%*%tX%*%y
# Predicted values (observed data*coefficients)
ypred <- X%*%coef
# Residuals (observed data-predicted data)
yresid <- y - ypred
# Get desciptives
# Name of dependent variable (already in dvname)
# Coefficients (already in coef)
# Min, mean, median and max of residuals
residdata <- data.frame("Min"=min(yresid), "Mean"=mean(yresid), "Median"=median(yresid), "Max"=max(yresid))
# Print results in pretty print
cat("Dependent variable: ", dvname, "\n\n")
cat("Coefficients:\n")
show(t(coef))
cat("\nResiduals:\n")
print(residdata)
# Create plot
plot(ypred,yresid, main="Predicted values vs. Residals", xlab="Predicted values", ylab="Residuals")
# Return data invisibly for further calculations
invisible(list("Coefficients"=coef, "Predicted"=ypred, "Residuals"=yresid))
}
try(MyLRegression(0, gala$Species))
try(MyLRegression(0, 0))
try(MyLRegression(data.frame(cbind(0, 0),0)
try(MyLRegression(data.frame(cbind(0, 0),0))
try(MyLRegression(data.frame(cbind(0, 0),0))
try(MyLRegression(data.frame(cbind(0, 0)),0))
try(MyLRegression(data.frame(cbind(0, 0)),0))
try(MyLRegression(data.frame(c(0, 0)),dv=c(2,1)))
try(MyLRegression(data.frame(c(0, 1)),dv=c(2,1)))
# MyLRegression function
# MyLRegression performs a linear regression
# MyLRegression takes a matrix of predictors (one variable per column, one sample per row) and vector of the dependent variable as input
# If no dependent variable is given, the first column of the predictor matrix becomes the dependent variable
# MyLRegression prints the name of the dependent variable, the coefficients and some statistics of the residuals
# MyLRegression returns the coefficients ("Coefficients"), the predicted values("Predicted") and residuals ("Residuals")
MyLRegression <- function(data, dv=0){
# Check if data is empty
if(all(data==0)){
stop("Data must have nonzero values")
}
# Turn data into matrix to prevent later trouble
data <- as.matrix(data)
# Check if dependent variable is given (if dv is nonzero, any(dv!=0) will be True)
if(any(dv!=0)){
# Store name of dv
dvname <- as.character(substitute(dv))
# Check if dv is data frame, if so: select first column
if(class(dv)=="data.frame"){
if(ncol(dv)>1){
stop("This function can handle only one dv")
}
dv=as.numeric(dv[,1])
}
# Check if dv has the same length as the data, if not, return an error
if(length(as.numeric(dv))!=nrow(data)){
stop("Length of dv does not match length of data")
}
}
else{
# Check if data has less than two columns (and thus no column left after dv is assigned).
# If so, give error.
if(ncol(data)<2){
stop("At least two variables are needed for linear regression.\n\n")
}
# Store name of dv for later use
dvname <- colnames(data)[1]
# Make the first column of data dv and remove it from data
dv=data[,1]
data=data[,-1]
# Give warning
warning("No dv was given. Using the first column as dv\n\n")
}
# Add intercept to data and transform into matrix
X <- as.matrix(cbind("(Intercept)"=rep(1,nrow(data)), data))
# Define the transpose
tX <- t(X)
# Define y
y <- as.numeric(dv)
# Calculate the inverse of X'X
tXXinv <- solve(tX%*%X)
# Calculate the coefficients (beta)
coef <- tXXinv%*%tX%*%y
# Predicted values (observed data*coefficients)
ypred <- X%*%coef
# Residuals (observed data-predicted data)
yresid <- y - ypred
# Get desciptives
# Name of dependent variable (already in dvname)
# Coefficients (already in coef)
# Min, mean, median and max of residuals
residdata <- data.frame("Min"=min(yresid), "Mean"=mean(yresid), "Median"=median(yresid), "Max"=max(yresid))
# Print results in pretty print
cat("Dependent variable: ", dvname, "\n\n")
cat("Coefficients:\n")
show(t(coef))
cat("\nResiduals:\n")
print(residdata)
# Create plot
plot(ypred,yresid, main="Predicted values vs. Residals", xlab="Predicted values", ylab="Residuals")
# Return data invisibly for further calculations
invisible(list("Coefficients"=coef, "Predicted"=ypred, "Residuals"=yresid))
}
# Error 4: data is zero
try(MyLRegression(data.frame(c(0, 0)),dv=c(2,1)))
(try(MyLRegression(data.frame(c(0, 0)),dv=c(2,1))))
try((MyLRegression(data.frame(c(0, 0)),dv=c(2,1))))
# Error 3.2: dv has more than 2 columns
(try(with(gala, MyLRegression(cbind(Area, Elevation, Endemics), gala[c("Species", "Area")]))))
print(try(with(gala, MyLRegression(cbind(Elevation, Endemics), cbind(Species, Area)))))
(try(with(gala, MyLRegression(cbind(Elevation, Endemics), cbind(Species, Area)))))
Myfit <- MyLRegression(gala[c("Area", "Elevation", "Endemics")], gala$Species)
lm(Species~Area + Elevation + Endemics, data=gala)
fit <- lm(Species~Area + Elevation + Endemics, data=gala)
summary(fit)
2+2
society$employ_dv <- 0
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
society$a_dvage <- as.numeric(society$a_dvage)
with(society, society[(a_dvage<=15 || a_dvage>=64) && a_employ=="yes"])
with(society$a_dvage, society[(a_dvage<=15 || a_dvage>=64) && a_employ=="yes"])
with(society, society[(a_dvage<=15 || a_dvage>=64) && a_employ=="yes"])
with(society, a_dvage[(a_dvage<=15 || a_dvage>=64) && a_employ=="yes"])
with(society, a_dvage[(a_dvage<=15 || a_dvage>=64) && a_employ=="yes",])
with(society, society[(a_dvage<=15 || a_dvage>=64) && a_employ=="yes",])
with(society, society[a_employ=="yes",])
with(society, hist(society$a_dvage[a_employ=="yes",]))
with(society, hist(society$a_dvage[a_employ=="yes"]))
society$employ_dv <- 0
society[society$a_dvage]
society[society$a_dvage,]
society[society$a_dvage > 64,]
society[society$a_dvage > 64 && society$a_employ == 'yes',]
society[society$a_dvage > 64 && society$a_employ == 'yes',]
society[society$a_dvage < 15 && society$a_employ == 'yes',]
society[society$a_dvage < 17 && society$a_employ == 'yes',]
society[society$a_dvage < 20 && society$a_employ == 'yes',]
society[society$a_dvage < 30 && society$a_employ == 'yes',]
levels(society$a_employ)
society[society$a_dvage < 30 && society$a_employ == "yes",]
society[society$a_employ == "yes",]
hist(society[society$a_employ == "yes",]
levels(society$a_employ)
hist(society$a_dvage[society$a_employ == "yes",])
hist(society$a_dvage[society$a_employ == "yes"])
with(society, society[a_employ=="yes" & (a_dvage<15 | a_dvage >64),])
x <- with(society, society[a_employ=="yes" & (a_dvage<15 | a_dvage >64),])
View(x)
with(society, society[a_employ=="yes" & (a_dvage<15 | a_dvage >64),])
with(society, society[a_employ=="yes" & a_dvage >64,])
with(society, society[a_employ=="yes" & a_dvage >64,])
with(society, society[a_employ=="yes" & a_dvage >15,])
with(society, society[a_employ=="yes" & a_dvage <15,])
with(society, society[a_employ=="yes" & a_dvage >64,])
with(society, society[a_employ=="yes" & a_dvage <15,])
society$a_employ
levels(society$a_employ)
society$employ_dv <- 0
with(society,society[a_employ=='yes' & a_dvage =< 65,])
with(society,society[a_employ=='yes' & a_dvage <= 65,])
with(society,society$employ_dv[a_employ=='yes' & a_dvage <= 65,] <- 1)
with(society,society$employ_dv[a_employ=='yes' & a_dvage <= 65] <- 1)
View(society)
with(society,society$employ_dv[a_employ=='yes' & a_dvage <= 65] <- 1)
with(society,society$employ_dv[a_employ=='yes' & a_dvage <= 65]) <- 1
society$employ_dv[society$a_employ=='yes' & society$a_dvage <= 65] <- 1
society$employ_dv[society$a_employ=='yes' & society$a_dvage <= 65]
set.seed(5)
NP1=1000
dataP1 <- sample(c(1,2), size=NP1, replace = T, prob=c(40,60))
dataP1 <- data.frame(gender = dataP1)
dataP1$fpc <- rep(0,NP1)
dataP1$fpc[which(dataP1$gender==1)] <- 400
dataP1$fpc[which(dataP1$gender==2)] <- 600
dataP1$score <- rnorm(NP1)
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
library(sampling)
library(survey)
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
set.seed(5)
N=1000
datag <- sample(c(1,2), size=N, replace = T, prob=c(40,60))
datag <- data.frame(datag)
names(datag)[1] <- "gender"
datag$fpc <- rep(0,N)
datag$fpc[which(datag$gender==1)] <- 400
datag$fpc[which(datag$gender==2)] <- 600
datag$score <- rnorm(N)
s = strata(data=datag, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
s = strata(data=datag, stratanames="gender", size=c(50,50), method=c("srswor"))
levels(datags$gender)
levels(datag$gender)
levels(as.factor(datag$gender))
s = strata(data=datag, stratanames="gender", size=c(50,50), method="srswor")
View(datag)
s = strata(data=datag, stratanames="gender", size=c(50,50), method="srswor")
s = strata(data=datag, stratanames="gender", size=c(50), method="srswor")
View(datag)
s = strata(data=datag, stratanames=c("gender"), size=c(50,50), method="srswor")
s '-' strata(data=datag, stratanames=c("gender"), size=c(50,50), method="srswor")
s ''-''- strata(data=datag, stratanames=c("gender"), size=c(50,50), method="srswor")
s <- strata(data=datag, stratanames=c("gender"), size=c(50,50), method="srswor")
s <- strata(datag, stratanames=c("gender"), size=c(50,50), method="srswor")
s <- strata(datag, stratanames=c("gender"), method="srswor")
s <- strata(datag, stratanames=c("gender"), method=c("srswor"))
s <- strata(datag, stratanames=c("gender"))
s <- strata(datag)
s <- strata(datag, stratanames=c("gender"))
View(datag)
sP3 = strata(data=dataP1, stratanames=c("gender"))
View(dataP1)
sP3 = strata(data=dataP1, stratanames=c(gender), size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, stratanames=dataP1gender), size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, stratanames=dataP1$gender, size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, stratanames=c"gender"), size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
set.seed(5)
NP1=1000
dataP1 <- sample(c(1,2), size=NP1, replace = T, prob=c(40,60))
dataP1 <- data.frame(gender = as.factor(dataP1))
dataP1$fpc <- rep(0,NP1)
dataP1$fpc[which(dataP1$gender==1)] <- 400
dataP1$fpc[which(dataP1$gender==2)] <- 600
dataP1$score <- rnorm(NP1)
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
library(sampling)
library(survey)
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, c("gender"), size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1, method=c("srswor"))
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor", "srswor"))
View(dataP1)
class(dataP1$gender)
sP3 = strata(data=dataP1[order(dataP1$gender)], stratanames=c("gender"), size=c(50,50), method=c("srswor"))
sP3 = strata(data=dataP1[order(dataP1$gender),], stratanames=c("gender"), size=c(50,50), method=c("srswor"))
society
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
View(society)
Design <- svydesign(ids=a_hidp, strata=a_strata, data=society)
Design <- svydesign(ids="a_hidp", strata="a_strata", data=society)
Design <- svydesign(ids="a_hidp", strata="a_strata", data=society, weights="a_psnenip_xw")
class(society$a_hidp)
class(society$a_psnenip_xw)
Design <- svydesign(ids="a_hidp", strata="a_strata", data=society, weights="a_psnenip_xw")
class(society$a_strata)
Design <- svydesign(ids="a_hidp", data=society, weights="a_psnenip_xw")
Design <- svydesign(ids="a_hidp", variables="employ_dv" strata="a_strata", data=society, weights="a_psnenip_xw")
Design <- svydesign(ids="a_hidp", variables="employ_dv", strata="a_strata", data=society, weights="a_psnenip_xw")
class(society$employ_dv)
society$employ_dv <- as.numeric(0)
society$employ_dv[society$a_employ=='yes' & society$a_dvage <= 65] <- 1
class(society$employ_dv)
Design <- svydesign(ids="a_hidp", variables="employ_dv", strata="a_strata", data=society, weights="a_psnenip_xw")
Design <- svydesign(ids="a_hidp", strata="a_strata", data=society, weights="a_psnenip_xw")
society[society$a_psnenip_xw == 0,]
Design <- svydesign(ids="a_hidp", strata="a_strata", data=society, weights="a_psnenip_xw")
society[society$a_psnenip_xw == 0,]
sP3 = strata(data=dataP1, stratanames=c("gender"), size=c(50,50), method=c("srswor"))
dataP1
