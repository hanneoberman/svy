require(survey)
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
setwd("~/Documents/GitHub/svy")
require(survey)
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
require(survey)
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
require(survey)
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
require(survey)
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
require(survey)
society <- readRDS("Understanding Society innovation pnel wave A.RDS")
society$a_dvage <- as.numeric(society$a_dvage)
head(society)
head(society$a_ioutcome)
levels(society$a_ioutcome)
levels(society$a_ivfio)
summary(society$a_ivfio) #what's in the variable?
adults <- sum(society$a_ivfio == "Full interview") #the full interviews with adults
youths <- sum(society$a_ivfio ==  "Youth Interview") #the interviews with children
sum(adults, youths) #all personally completed interviews
adults & youths
adults && youths
adults
society$a_ivfio == "Full interview" #the full interviews with adults
society$a_ivfio == "Full interview" | "Youth Interview" #the full interviews with adults
society$a_ivfio == "Full interview" || "Youth Interview" #the full interviews with adults
society$a_ivfio == "Full interview" & "Youth Interview" #the full interviews with adults
society$a_ivfio == "Full interview" && "Youth Interview" #the full interviews with adults
society$a_ivfio == "Full interview" #the full interviews with adults
society$a_ivfio == ("Full interview" || "Youth Interview") #the full interviews with adults
society$a_ivfio == ("Full interview" && "Youth Interview") #the full interviews with adults
society$a_ivfio == "Full interview" #the full interviews with adults
society$a_ivfio ==  "Youth Interview" | society$a_ivfio == " Full interview"#the interviews with children
head(society$a_ivfio ==  "Youth Interview" | society$a_ivfio == " Full interview")#the interviews with children
head(society$a_ivfio == "Full interview") #the full interviews with adults
head(society$a_ivfio == "Youth Interview")
head(society$a_ivfio ==  "Youth Interview" | society$a_ivfio == " Full interview")#the interviews with children
head(society$a_ivfio ==  "Youth Interview" & society$a_ivfio == " Full interview")#the interviews with children
head(society$a_ivfio ==  "Youth Interview" & society$a_ivfio == "Full interview")#the interviews with children
head(society$a_ivfio ==  "Youth Interview" | society$a_ivfio == "Full interview")#the interviews with children
?matrix
a <- matrix(NA, 3600, 3)
a[,1] <- society$a_ivfio == "Full interview" #the full interviews with adults
View(a)
a[,2] <- society$a_ivfio == "Youth Interview"
a[,3] <- society$a_ivfio ==  "Youth Interview" | society$a_ivfio == "Full interview"#the interviews with children
society$interviews <- society$a_ivfio ==  "Youth Interview" | society$a_ivfio == "Full interview"
head(society$a_sex)
levels(society$a_sex)
head(society)
head(society$a_gor_dv)
head(society$a_urban_dv)
head(society$a_buno_dv)
levels(society$a_buno_dv)
head(society$a_race1_dv)
head(society$a_empol)
head(society$a_employ)
head(society$a_hhresp_dv)
levels(society$a_hhresp_dv)
rm(list = ls())
?power.t.test
?t.test
r calculation
# control group: n 50 m 150 sd 15, exp group n 50 m 160, sd 15
## 1.
# simulate one sample of data
contr <- rnorm(n=50, m=150, sd=15) # control group sample
exp <- rnorm(n=50, m=160, sd=15) # experimental group sample
# perform t.test() on the function
t.1 <- t.test(contr, y=exp)
1:1000
t.1$p.value
matrix(NA, 1000, 1)
?rnorm
simulate.power <- function(n1, n2, m1, m2, sd1, sd2, i) {
# optional: adjust function for unequal variances)
t.values <- matrix(NA, i, 1)
for (i in 1:i) {
g1 <- rnorm(n1, m1, sd1) # create sample for group 1
g2 <- rnorm(n2, m2, sd2) # create sample for group 2
t.values[i,] <- t.test(g1, g2)$p.value # store p.value of t-statistic in a vector.
}
}
simulate.power <- function(n1, m1, sd1, n2, m2, sd2, i) {
# optional: adjust function for unequal variances)
t.values <- matrix(NA, i, 1)
for (i in 1:i) {
g1 <- rnorm(n1, m1, sd1) # create sample for group 1
g2 <- rnorm(n2, m2, sd2) # create sample for group 2
t.values[i,] <- t.test(g1, g2)$p.value # store p.value of t-statistic in a vector.
}
t.values
}
simulate.power(50, 150, 15, 50, 160, 15, 1000)
simulate.power[2,]
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000)
test[2,]
?power.t.test
MyPowerBySimulationFunction <- function(i, n1, m1, sd1, n2, m2, sd2) { #hoeveel iteraties, mean en sd van de twee groepen
t_value <- matrix(NA, i, 1)
for (i in 1:i) {
controlgroup <- rnorm(n1, m1, sd1)
experperimentgroup <- rnorm(n2, m2, sd2)
t_value[i,] <- t.test(contr, exper)$p.value
}
}
MyPowerBySimulationFunction(1000, 50, 150, 15, 50, 160, 15)
### Part II - Resampling techniques
MyPowerBySimulationFunction <- function(i, n1, m1, sd1, n2, m2, sd2) { #hoeveel iteraties, mean en sd van de twee groepen
t_value <- matrix(NA, i, 1)
for (i in 1:i) {
contr <- rnorm(n1, m1, sd1)
exper <- rnorm(n2, m2, sd2)
t_value[i,] <- t.test(contr, exper)$p.value
}
}
MyPowerBySimulationFunction(1000, 50, 150, 15, 50, 160, 15)
### Part II - Resampling techniques
MyPowerBySimulationFunction <- function(i, n1, m1, sd1, n2, m2, sd2) { #hoeveel iteraties, mean en sd van de twee groepen
t_value <- matrix(NA, i, 1)
for (i in 1:i) {
contr <- rnorm(n1, m1, sd1)
exper <- rnorm(n2, m2, sd2)
t_value[i,] <- t.test(contr, exper)$p.value
}
t_value
}
MyPowerBySimulationFunction(1000, 50, 150, 15, 50, 160, 15)
# how would you obtain an estimate of power in this situation,
# thinking about definition of power in terms of this situation?
# definition of power:
# power by inbuilt R function
power.t.test(n = 50, delta = 10, sd = 15, sig.level = .05, power = NULL, alternative = "two.sided")
test
test < 0.05
?prop.test
mean(t.values < .05)
mean(test < .05)
sum(test)/1000
sum(test)
test
logical <- test <.05
logical
sum(logical)
sum(logical)/1000
power.t.test(n = 50, delta = 10, sd = 15, sig.level = .05, power = NULL, alternative = "two.sided")
simulate.power <- function(n1, m1, sd1, n2, m2, sd2, i, conf.level) {
# optional: adjust function for unequal variances)
# optional: what if delta = 0
# optional: change arguments in such a way that they are more similar to power.t.test() (input significance level)
t.values <- matrix(NA, i, 1)
for (i in 1:i) {
g1 <- rnorm(n1, m1, sd1) # create sample for group 1
g2 <- rnorm(n2, m2, sd2) # create sample for group 2
p.values[i,] <- t.test(g1, g2)$p.value # store p.value of t-statistic in a vector.
}
# of p.values, compute proportion "H0 is correctly rejected".
power <- mean(p.values < conf.level)
power
}
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000, conf.level = .05)
test
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000, conf.level = .05)
simulate.power <- function(n1, m1, sd1, n2, m2, sd2, i, conf.level) {
# optional: adjust function for unequal variances)
# optional: what if delta = 0
# optional: change arguments in such a way that they are more similar to power.t.test() (input significance level)
p.values <- matrix(NA, i, 1)
for (i in 1:i) {
g1 <- rnorm(n1, m1, sd1) # create sample for group 1
g2 <- rnorm(n2, m2, sd2) # create sample for group 2
p.values[i,] <- t.test(g1, g2)$p.value # store p.value of t-statistic in a vector.
}
# of p.values, compute proportion "H0 is correctly rejected".
power <- mean(p.values < conf.level)
power
}
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000, conf.level = .05)
test
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000, conf.level = .05)
test
simulate.power <- function(n1, m1, sd1, n2, m2, sd2, i, alpha) {
# optional: adjust function for unequal variances)
# optional: what if delta = 0
# optional: change arguments in such a way that they are more similar to power.t.test() (input significance level)
p.values <- matrix(NA, i, 1)
for (i in 1:i) {
g1 <- rnorm(n1, m1, sd1) # create sample for group 1
g2 <- rnorm(n2, m2, sd2) # create sample for group 2
p.values[i,] <- t.test(g1, g2)$p.value # store p.value of t-statistic in a vector.
}
# of p.values, compute proportion "H0 is correctly rejected".
power <- mean(p.values < alpha)
power
}
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000, alpha = .05)
test
?power.t.test
simulate.power <- function(n1, m1, sd1, n2, m2, sd2, i, alpha) {
# optional: adjust function for unequal variances)
# optional: what if delta = 0
# optional: change arguments in such a way that they are more similar to power.t.test() (input significance level)
p.values <- matrix(NA, i, 1)
for (i in 1:i) {
g1 <- rnorm(n1, m1, sd1) # create sample for group 1
g2 <- rnorm(n2, m2, sd2) # create sample for group 2
p.values[i,] <- t.test(g1, g2)$p.value # store p.value of t-statistic in a vector.
}
# compute power:
power <- mean(p.values < alpha) # compute proportion of times the p.value is below the alpha level, in other words: when H0 is correctly rejected.
return(p.values)
return(power)
}
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000, alpha = .05)
test
View(test)
power.t.test(n = 50, delta = 0, sd = 15, sig.level = .05, power = NULL, alternative = "two.sided")
simulate.power <- function(n1, m1, sd1, n2, m2, sd2, i, alpha) {
# optional: adjust function for unequal variances)
# optional: what if delta = 0
# optional: change arguments in such a way that they are more similar to power.t.test() (input significance level)
p.values <- matrix(NA, i, 1)
for (i in 1:i) {
g1 <- rnorm(n1, m1, sd1) # create sample for group 1
g2 <- rnorm(n2, m2, sd2) # create sample for group 2
p.values[i,] <- t.test(g1, g2)$p.value # store p.value of t-statistic in a vector.
}
# compute power:
power <- mean(p.values < alpha) # compute proportion of times the p.value is below the alpha level, in other words: when H0 is correctly rejected.
results <- list(p.values = p.values, power = power)
}
test <- simulate.power(50, 150, 15, 50, 160, 15, 1000, alpha = .05)
View(test)
test$p.values[2]
View(test)
## 1.
# flight data
CSFI <- matrix(c(2,5,5,6,6,7,8,9), 8, 1)
length(TFI)
## 1.
# flight data
CSFI <- matrix(c(2,5,5,6,6,7,8,9), 8, 1)
TFI <- matrix(c(1,1,2,3,3,4,5,7,7,8), 10, 1)
CSFI
TFI
# appropriate resampling technique for hypothesis testing: bootstrap or randomization (permutation) test.
# permutation test:
# can be exact if all possible permutations can be carried out
# number of possible permutations:
(8+10)! / (8!+10!)
# appropriate resampling technique for hypothesis testing: bootstrap or randomization (permutation) test.
# permutation test:
# can be exact if all possible permutations can be carried out
# number of possible permutations:
factorial(8+10) / (factorial(8)+factorial(10))
# appropriate resampling technique for hypothesis testing: bootstrap or randomization (permutation) test.
# permutation test:
# can be exact if all possible permutations can be carried out
# number of possible permutations:
possibleperms <- factorial(8+10) / (factorial(8)*factorial(10))
possibleperms
install.packages("BHH2")
library(BHH2)
permtest(CSFI, TFI)
result <- permtest(CSFI, TFI)
result <- permtest(CSFI, TFI)
result
result$N
result[1]
?levene.test
install.packages("htest")
?leveneTest
install.packages("car")
?leveneTest
?levenTest
levene.test()
leveneTest
?var
# assumes observations are exchangeable, e.g. groups have equal variances
var(CSFI)
var(TFI)
